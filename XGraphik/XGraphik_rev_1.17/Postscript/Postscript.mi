IMPLEMENTATION MODULE Postscript;
(******************************************************************************)
(* Modul      : Postscript                                                    *)
(* Autor      : Alexander Schoelling                                          *)
(* Funktion   : Schreiben von Postscript-Anweisungen in eine Datei            *)
(* Bemerkungen: ./.                                                           *)
(******************************************************************************)

FROM Fonts     IMPORT   FontFamily,
                        FontStyle;

FROM NumConv   IMPORT   Num2Str;

FROM RealConv  IMPORT   Real2Str;

FROM Strings   IMPORT   String,
                        Append,
                        Assign,
			Length,
                        StrEq;

FROM SysLib    IMPORT   exit;

FROM TextIO    IMPORT   File,
                        OpenOutput,
                        OpenInput,
                        Close,
                        PutString,
                        GetString,
                        PutLn,
                        PutInt,
                        PutReal,
                        GetInt,
                        GetReal,
                        Accessible,
                        EOF,
                        PutChar,
                        GetChar;



CONST	ISOAPPENDIX	= "-ISOLatin1";

	TIMES		= "/Times-Roman";
	TIMESFETT	= "/Times-Bold";
	TIMESKURSIV	= "/Times-Italic";
	TIMESFETTKURS	= "/Times-BoldItalic";

	TR		= "TR";
	TRF		= "TRF";
	TRK		= "TRK";
	TRFK		= "TRFK";

	HELV		= "/Helvetica";
	HELVFett	= "/Helvetica-Bold";
	HELVKURSIV	= "/Helvetica-Oblique";
	HELVFETTKURS	= "/Helvetica-BoldOblique";

	HR		= "H";
	HF		= "HF";
	HK		= "HK";
	HFK		= "HFK";

	COUR		= "/Courier";
	COURFETT	= "/Courier-Bold";
	COURKURSIV	= "/Courier-Oblique";
	COURFETTKURS	= "/Courier-BoldOblique";

	CR		= "C";
	CF		= "CF";
	CK		= "CK";
	CFK		= "CFK";



        
VAR Number : INTEGER; (* Seitennummer *)





(******************************************************************************)
PROCEDURE FontName (    family : FontFamily;                        (* IN     *)
                        style  : FontStyle;                         (* IN     *)
                        size   : REAL;                              (* IN     *)
                    VAR name   : String);                           (*    OUT *)
(******************************************************************************)
VAR     numstr: String;
        done : BOOLEAN;
BEGIN
        IF family = Font_Times THEN
                Assign (name, "TR")
        ELSIF family = Font_Helvetica THEN
                Assign (name, "H")
        ELSE
                Assign (name, "C")
        END;

        IF style = Style_Normal THEN
        (*
                Tue nichts
        *)
         ELSIF style = Style_Kursiv THEN
                Append (name, "K");
        ELSIF style = Style_Fett THEN
                Append (name, "F")
        ELSE
                Append (name, "FK");
        END;

        Real2Str (size, 5, 3, numstr, done);
        
        Append (name, " ");
        Append (name, numstr);
        Append (name, " scalefont setfont");
END FontName;



        
(*----------------------------------------------------------------------------*)
PROCEDURE WriteFontEncodingChange (
				f		: File;             (* IN     *)
				fontname	: String );         (* IN     *)
(*----------------------------------------------------------------------------*)
(* write a short postscript program in the header to define a new font with   *)
(* ISO Latin 1 encoding. the idea for this program comes from postscript      *)
(* language reference manual section 5.6.1 Changing the Encoding Vector       *)
(* see page 275                                                               *)
VAR	isofontname	: String;
BEGIN
   Assign(isofontname, fontname);
   Append(isofontname, ISOAPPENDIX);

   PutString(f, "% Define a new fontname ");
   PutString(f, isofontname);
   PutString(f, " for ");
   PutString(f, fontname);
   PutLn(f);
   PutString(f, fontname); PutString(f, " findfont"); PutLn(f);
   PutString(f, "dup length dict begin"); PutLn(f);
   PutString(f, "  {1 index /FID ne {def} {pop pop} ifelse} forall"); PutLn(f);
   PutString(f, "  /Encoding ISOLatin1Encoding def"); PutLn(f);
   PutString(f, "  currentdict"); PutLn(f);
   PutString(f, "end"); PutLn(f);

   PutString(f, isofontname); PutString(f, " exch definefont pop"); PutLn(f);
   PutLn(f);
END WriteFontEncodingChange;


			
(*----------------------------------------------------------------------------*)
PROCEDURE WriteEncodingChange (	f	: File );                   (* IN     *)
(*----------------------------------------------------------------------------*)
(* write the postscript programs to define new fonts that are ISO Latin 1     *)
(* encoded                                                                    *)
BEGIN
   WriteFontEncodingChange(f, TIMES);
   WriteFontEncodingChange(f, TIMESFETT);
   WriteFontEncodingChange(f, TIMESKURSIV);
   WriteFontEncodingChange(f, TIMESFETTKURS);
   PutLn(f);
   WriteFontEncodingChange(f, HELV);
   WriteFontEncodingChange(f, HELVFett);
   WriteFontEncodingChange(f, HELVKURSIV);
   WriteFontEncodingChange(f, HELVFETTKURS);
   PutLn(f);
   WriteFontEncodingChange(f, COUR);
   WriteFontEncodingChange(f, COURFETT);
   WriteFontEncodingChange(f, COURKURSIV);
   WriteFontEncodingChange(f, COURFETTKURS);
END WriteEncodingChange;



(*----------------------------------------------------------------------------*)
PROCEDURE WriteFontNameDef (	f		: File;
				fontabk,
				fontname	: String );
(*----------------------------------------------------------------------------*)
(* write a postscript definition, that gives a shortcut to our ISO Latin 1    *)
(* fonts.                                                                     *)
VAR	isoname	: String;
BEGIN
	Assign(isoname, fontname);
	Append(isoname, ISOAPPENDIX);

	PutString(f, "/"); PutString(f, fontabk);
	PutString(f, " "); PutString(f, isoname);
	PutString(f, " findfont def");
	PutLn(f);
END WriteFontNameDef;


			
(*----------------------------------------------------------------------------*)
PROCEDURE WriteFontDefs (	handle		: File );
(*----------------------------------------------------------------------------*)
BEGIN
	WriteFontNameDef(handle, TR, TIMES);
	WriteFontNameDef(handle, TRF, TIMESFETT);
	WriteFontNameDef(handle, TRK, TIMESKURSIV);
	WriteFontNameDef(handle, TRFK, TIMESFETTKURS);
	PutLn(handle);
	WriteFontNameDef(handle, HR, HELV);
	WriteFontNameDef(handle, HF, HELVFett);
	WriteFontNameDef(handle, HK, HELVKURSIV);
	WriteFontNameDef(handle, HFK, HELVFETTKURS);
	PutLn(handle);
	WriteFontNameDef(handle, CR, COUR);
	WriteFontNameDef(handle, CF, COURFETT);
	WriteFontNameDef(handle, CK, COURKURSIV);
	WriteFontNameDef(handle, CFK, COURFETTKURS);
END WriteFontDefs;



(******************************************************************************)
PROCEDURE NewFile (    name : String;                               (* IN     *)
                   VAR handle : File);                              (*    OUT *)
(******************************************************************************)
(* Parameter  : Zu verwendender Dateiname (name), Filehandle der Datei        *)
(* Funktion   : Oeffnet die bezeichnete Datei zum Schreiben; schreibt die     *)
(*              PS-Praeambel in die Datei                                     *)
(* Bemerkungen: Wenn die Datei nicht geoeffnet werden konnte, wird das        *)
(*              Programm abgebrochen!                                         *)
(******************************************************************************)
BEGIN
(*
        IF NOT Accessible (name, TRUE) THEN exit(-1); END;
*)
        OpenOutput (handle, name);
        PutString (handle, "%!PS-Adobe-3.0");
        PutLn (handle);
        PutString (handle, "%%BeginProlog");
        PutLn (handle);

	WriteEncodingChange(handle); PutLn(handle);

	WriteFontDefs(handle); PutLn(handle);

        PutString (handle, "%%EndProlog");
        PutLn (handle);
        PutLn (handle);
        Number := 1;
        PutString (handle, "%%Page: 1 1");
        PutLn (handle);        PutLn (handle);
END NewFile;



(******************************************************************************)
PROCEDURE SetFont (    handle : File;                               (* IN     *)
                       family : FontFamily;                         (* IN     *)
                       style  : FontStyle;                          (* IN     *)
                       size   : REAL);                              (* IN     *)
(******************************************************************************)
(* Parameter  : handle - Filehandle aus NewFile                               *)
(*              family - Die Font Familie (Siehe FontNames.md fuer Werte)     *)
(*              style  - Der Font Style   (Siehe FontNames.md fuer Werte)     *)
(*              size   - Fontgroesse in Point                                 *)
(* Funktion   : Schreibt die Anweisungen zur Auswahl des spzifizierten Fonts  *)
(*              in die Datei                                                  *)
(******************************************************************************)
VAR hilf : String;
BEGIN
        FontName (family, style, size, hilf);
        PutString (handle, hilf);
        PutLn (handle);
END SetFont;



(*----------------------------------------------------------------------------*)
PROCEDURE CharToOct (	ch	: CHAR;
		VAR	oIndex	: INTEGER;
		VAR	ostr	: ARRAY OF CHAR );
(*----------------------------------------------------------------------------*)
(* Change an eight bit character to its corr. octal code *)
VAR	newStr	: String;
	numStr	: String;
	done	: BOOLEAN;
	chNum	: LONGCARD;
	i	: CARDINAL;
BEGIN
	chNum := ORD( ch );
	IF chNum > 127 THEN
		Assign( newStr, "\" );
		Num2Str( chNum, 8, numStr, done );
		Append( newStr, numStr );
		FOR i := 0 TO Length(newStr)-1 DO
			ostr[oIndex] := newStr[i];
			INC( oIndex );
		END; (* FOR *)
	END; (* IF *)
END CharToOct;



(*----------------------------------------------------------------------------*)
PROCEDURE AdjustString(	istr	: ARRAY OF CHAR;                    (* IN     *)
		VAR	ostr	: ARRAY OF CHAR);                   (* OUT    *)
(*----------------------------------------------------------------------------*)
VAR	iIndex,
	oIndex	: INTEGER;
BEGIN
	oIndex := 0;
	iIndex := 0;
	WHILE istr[iIndex] <> 0C DO
		IF (istr[iIndex] = '\') THEN
			ostr[oIndex] := '\'; INC(oIndex);
			ostr[oIndex] := '\'; INC(oIndex);
		ELSIF istr[iIndex] = '(' THEN
			ostr[oIndex] := '\'; INC(oIndex);
			ostr[oIndex] := '('; INC(oIndex);
		ELSIF istr[iIndex] = ')' THEN
			ostr[oIndex] := '\'; INC(oIndex);
			ostr[oIndex] := ')'; INC(oIndex);
		ELSIF ( ORD( istr[iIndex] ) > 127 ) THEN
			CharToOct( istr[iIndex], oIndex, ostr );
		ELSE
			ostr[oIndex] := istr[iIndex]; INC(oIndex);
		END; (* IF *)
		INC(iIndex);
	END; (* WHILE *)
	ostr[oIndex] := 0C;
END AdjustString;



(******************************************************************************)
PROCEDURE AddString (    handle : File;                             (* IN     *)
                         px, py : REAL;                             (* IN     *)
                         string : String);                          (* IN     *)
(******************************************************************************)
(* Parameter  : handle - Filehandle aus NewFile                               *)
(*              px, py - Position des Strings                                 *)
(*              string - Zu schreibende Zeichenkette                          *)
(* Funktion   : Schreibt die zur Ausgabe des Strings notwendigen PS-Befehle   *)
(*              in die Datei                                                  *)
(* Bemerkungen: Der Koordinatenursprung liegt in der unteren, linken Ecke     *)
(******************************************************************************)
VAR	psString	: ARRAY[0..512] OF CHAR;
BEGIN
	AdjustString(string, psString);

        PutReal (handle, px, 5, 3);
        PutString (handle, " ");
        PutReal (handle, py, 5, 3);
        PutString (handle, " moveto (");
        PutString (handle, psString);
        PutString (handle, ") show");
        PutLn (handle);
END AddString;



(******************************************************************************)
PROCEDURE NextPage (    handle : File);                             (* IN     *)
(******************************************************************************)
(* Parameter  : handle - FileHandle aus NewFile                               *)
(* Funktion   : Fuegt in die Datei die Befehle fuer einen Seitenwechsel ein.  *)
(******************************************************************************)
BEGIN
        PutString (handle, "showpage");
        PutLn (handle);
        PutString (handle, "%%Page: ");
        INC(Number);
        PutInt (handle, Number, 1);
        PutChar (handle, ' ');
        PutInt (handle, Number, 1);
        PutLn (handle);
END NextPage;



(******************************************************************************)
PROCEDURE ImportGraphics (    handle : File;                        (* IN     *)
                              px, py : REAL;                        (* IN     *)
                              name   : String);                     (* IN     *)
(******************************************************************************)
(* Parameter  : handle - Filehandle aus NewFile                               *)
(*              px, py - Positionsangaben                                     *)
(*              name   - Name der einzufuegenden EPSF-Datei                   *)
(* Funktion   : Fuegt die angegebene EPSF-Datei (Encapsulated Postscript) in  *)
(*              die bezeichnete Datei ein                                     *)
(******************************************************************************)
VAR     f : File;
        c : CHAR;
BEGIN
        OpenInput (f, name);
        PutReal (handle, px, 5, 3);
        PutString (handle, " ");
        PutReal (handle, py, 5, 3);
        PutString (handle, " moveto currentpoint translate");
        PutLn (handle);
        WHILE (NOT EOF(f)) DO
                GetChar (f, c);
                PutChar (handle, c);
        END;
        PutLn (handle);
        PutReal (handle, -px, 5, 3);
        PutString (handle, " ");
        PutReal (handle, -py, 5, 3);
        PutString (handle, " moveto currentpoint translate");
        PutLn (handle);
        Close (f);
END ImportGraphics;


(******************************************************************************)
PROCEDURE GetBoundingBox (    name   : String;                      (* IN     *)
                          VAR x1, y1 : REAL;                        (*    OUT *)
                          VAR x2, y2 : REAL);                       (*    OUT *)
(******************************************************************************)
(* Parameter  : name   - Name der EPSF-Datei                                  *)
(*              x1, y1 - Untere, linke Ecke                                   *)
(*              x2, y2 - Obere, rechte Ecke                                   *)
(* Funktion   : liefert die Bounding Box der angegebenen EPSF-Datei           *)
(*              (Encapsulated Postscript). (x1, y1) untere linke Ecke,        *)
(*              (x2, y2) obere rechte Ecke.                                   *)
(******************************************************************************)
VAR     f     : File;
        s, sc : String;
BEGIN
        Assign (sc, "%%BoundingBox:");
        OpenInput (f, name);
        WHILE (NOT EOF(f)) DO
                GetString (f, s);
                IF StrEq (s, sc) THEN
                        GetReal (f, x1);
                        GetReal (f, y1);
                        GetReal (f, x2);
                        GetReal (f, y2);
                END;
        END;
        Close (f);                
END GetBoundingBox;

                
(******************************************************************************)
PROCEDURE CloseFile (VAR handle : File);                            (* IN/OUT *)
(******************************************************************************)
(* Parameter  : handle - Filehandle aus NewFile                               *)
(* Funktion   : Schliesst die angegebene Datei                                *)
(* Bemerkungen: handle wird auf NIL gesetzt, Zugriffe auf die Ausgabedatei    *)
(*              sind danach nicht mehr moeglich.                              *)
(******************************************************************************)
BEGIN
        PutString (handle, "showpage"); PutLn (handle);
        PutString (handle, "%%EOF"); PutLn (handle);
        Close (handle);
END CloseFile;



END Postscript.
